//-uses(k) // TODO: prints twice??
// Bunny351 - this is a bug, which I will fix, for the meantime, add a "-module(k)" at the top of kanren.pcn

#include "kanren.pcn"

main()
{
    /*
    test_x5y6(),
    test_x5y6take2(),
    test_x5y6full(),
    test_x5y6z7(),
    test_x5y6or7(),
    */
    test_custom_reifier(),
    test_disj3_567(),
    test_conde(),
    test_appendo()
}

test_x5y6()
{
    run(r, ([x,y]), disj_plus(equalo(5,x), equalo(6,y))),
    writeln(r)
}

test_x5y6take2()
{
    run_n(2, r, ([x,y]), disj_plus(equalo(5,x), equalo(6,y))),
    writeln(r)
}

test_x5y6full()
{
    {||
    callempty(callfresh(x, callfresh(y, conj(equalo(5,x), equalo(6,y)))), r, fill),
    take_all(r, fill),
    },
    writeln(r)
}

test_x5y6z7()
{
    {||
    callempty(fresh(([x,y,z]), equalo(5,x), equalo(6,y), equalo(7,z)), r, fill),
    take_all(r, fill),
    },
    writeln(r)
}

test_x5y6or7()
{
    {||
    callempty(fresh(([x,y]), conj(equalo(5,x), disj(equalo(6,y),equalo(7,y)))), r, fill),
    take_all(r, fill),
    },
    writeln(r)
}

test_custom_reifier()
{
    run_reif(r, ``custom_reifier``, ([x,y]), disj(equalo(5,x), equalo(6,y))),
    writeln(r)
}

custom_reifier(states, reified)
{
    app:maplist(``walk2``, states, reified)
}

walk2(st, r)
{
    walkstar({0}, st.substitutions, x),
    walkstar({1}, st.substitutions, y),
    r = {x,y}
}

test_disj3_567()
{
    run_n(9, r, [x], disj3(fives(x), sixes(x), sevens(x))),
    writeln(r)
}

test_conde()
{
    // todo: conde macro doesn't play nice with nested lists and recursion
    run(r, ([x,y]), disj_plus(
        conj_plus(equalo(5,x), equalo(6,y)),
        conj_plus(equalo(6,x), equalo(5,y))
    )),
    writeln(r)
}

#define appendo(a,b,c) ``_appendo(a,b,c)``
_appendo(a, b, c, st, str, fill)
{
    f = disj(
        conj(
            equalo(a, []),
            equalo(b, c)
        ),
        fresh(([h,at,ct]), conj_plus(
            equalo(a, [h|at]),
            equalo(c, [h|ct]),
            appendo(at, b, ct)
        )
    )),
    `f`(st, str, fill)
}

test_appendo()
{
    run(r, ([q,a,b,c]), equalo(q, ([a,b])), equalo(c, (["a","b","c","d"])),  appendo(a,b,c)),
    writeln(r)
}
